function asserteq(a, b) {
    if (a != b) {
        throw new Error(`assertion failed, '${a}' != '${b}'`);
    }
}

let input = [
'[[[[8,6],[0,8]],[5,2]],4]',
'[[[9,[7,7]],[6,2]],[[[5,9],5],[[7,1],6]]]',
'[[[7,[6,6]],[[8,5],8]],[[[2,9],[1,6]],[0,6]]]',
'[[[5,[7,5]],[9,2]],[[[2,4],[8,1]],[7,1]]]',
'[[[[9,1],[4,1]],[[5,9],[2,0]]],[5,[8,[0,3]]]]',
'[[[9,5],[9,[1,7]]],[[[9,9],[8,9]],4]]',
'[2,[[2,4],7]]',
'[[[[8,7],[9,5]],0],[[[6,7],[9,2]],7]]',
'[[[[5,5],3],[4,[2,3]]],[7,[7,7]]]',
'[8,[5,5]]',
'[[[0,[3,4]],[[3,4],[0,3]]],[[[9,6],[1,1]],[1,[8,7]]]]',
'[[[4,8],3],[3,[9,[8,9]]]]',
'[[5,[2,[5,2]]],[2,9]]',
'[[[[5,6],[1,8]],[3,6]],[3,[[4,4],[3,4]]]]',
'[[[1,0],3],[[1,[2,1]],[[2,5],[2,0]]]]',
'[[[6,7],[[0,5],9]],[[0,7],[[4,7],5]]]',
'[[[4,[3,1]],7],[[5,2],[3,0]]]',
'[[[6,6],[9,[2,6]]],[9,[[3,8],[2,6]]]]',
'[[[9,2],0],[[3,[6,6]],[7,[1,7]]]]',
'[[8,0],[9,[[5,5],5]]]',
'[[2,7],[[[8,7],0],[[1,1],[6,9]]]]',
'[[4,[7,[9,3]]],7]',
'[[[5,3],[[3,2],0]],[7,3]]',
'[[0,[8,[8,6]]],1]',
'[[4,5],[[[4,6],9],[3,0]]]',
'[[[[1,5],9],[[0,4],9]],[[[8,0],[4,2]],[0,[8,6]]]]',
'[[[6,4],[5,3]],3]',
'[[[[4,0],[6,6]],9],[[[7,0],7],[[4,5],3]]]',
'[[[[3,5],9],[[7,4],[6,8]]],[1,7]]',
'[[[[2,7],2],[9,3]],[[[1,2],3],7]]',
'[[[[9,4],[7,3]],0],[[7,[5,9]],[[7,0],[0,7]]]]',
'[[[5,6],[[6,5],[5,3]]],[[4,[8,5]],1]]',
'[[[2,6],0],[[1,0],[[7,2],[1,0]]]]',
'[[9,3],8]',
'[[[5,9],[2,[8,5]]],[[5,[4,7]],[[1,8],9]]]',
'[[[6,[6,4]],[0,1]],[0,[[3,9],9]]]',
'[3,9]',
'[[[7,5],[[9,3],[1,5]]],[[6,3],[8,[6,5]]]]',
'[[0,[0,5]],[7,0]]',
'[[[[0,9],7],3],[[8,6],[8,7]]]',
'[6,[7,[4,[9,0]]]]',
'[[[[2,4],[7,7]],4],[[1,5],5]]',
'[[3,6],[8,4]]',
'[[4,1],[[[3,9],[4,6]],[7,[3,0]]]]',
'[[[6,[9,1]],[7,4]],[[[5,7],[3,5]],[[2,2],5]]]',
'[[[[9,7],[8,2]],[0,[3,7]]],[[[8,8],4],[[5,2],5]]]',
'[[7,[0,[2,2]]],[4,[2,4]]]',
'[[[0,8],[[7,7],[8,0]]],[6,1]]',
'[6,[[[4,4],[3,9]],[[3,0],[4,3]]]]',
'[[[8,8],[2,[4,2]]],[[8,[0,1]],9]]',
'[4,[[6,[4,6]],[1,[6,9]]]]',
'[[[[8,1],[3,6]],[[5,3],7]],[[9,6],1]]',
'[[8,[[1,5],[1,7]]],[[[8,6],5],7]]',
'[6,3]',
'[[[[7,2],[9,9]],0],[[[9,0],8],[5,7]]]',
'[[[[1,0],3],[[7,0],[1,2]]],0]',
'[2,[[0,4],[6,[6,8]]]]',
'[[[[3,2],[4,1]],3],6]',
'[[[5,6],5],[[[3,4],[5,7]],[[5,5],6]]]',
'[1,[[8,[2,2]],[4,2]]]',
'[5,[[[4,7],1],[[6,6],7]]]',
'[[[[0,3],9],9],[0,[2,2]]]',
'[[[[8,9],3],5],[[1,6],[[6,5],[1,6]]]]',
'[[1,[[0,1],0]],[[[5,8],1],[1,[0,0]]]]',
'[[[[3,5],[9,4]],[7,[0,9]]],[8,[9,[1,9]]]]',
'[4,4]',
'[[7,[7,[0,2]]],[[8,8],[5,5]]]',
'[[[5,[2,8]],[3,3]],[4,[8,7]]]',
'[3,[8,[6,4]]]',
'[[8,[[7,7],2]],[[9,1],[[5,8],[8,1]]]]',
'[[[4,[5,2]],[[6,0],[7,7]]],[[[5,4],[8,3]],[[5,2],8]]]',
'[9,[2,5]]',
'[3,[5,5]]',
'[[[6,6],[3,[0,0]]],[[5,[3,3]],[8,8]]]',
'[[5,[2,[5,2]]],[[[8,7],9],[[4,1],6]]]',
'[[[[7,2],[8,5]],8],[[1,[5,5]],[0,7]]]',
'[[4,[6,8]],[[[2,4],[6,2]],[7,[3,6]]]]',
'[[8,5],[[[5,0],3],9]]',
'[[[[5,2],6],[7,2]],[[[7,4],9],0]]',
'[[[4,[6,5]],8],[[9,[1,5]],[8,9]]]',
'[[[5,[2,4]],[8,[9,4]]],[[1,5],2]]',
'[[[[1,4],2],[3,[8,9]]],7]',
'[[6,[1,7]],[9,2]]',
'[[[2,[9,0]],[[4,8],[3,4]]],[[[6,5],0],[[3,3],[4,3]]]]',
'[[[[4,4],[9,7]],[[4,8],7]],[[5,[6,6]],0]]',
'[[[[5,2],[2,2]],[[8,3],0]],[2,[3,5]]]',
'[[0,4],[[[9,0],[9,3]],[[1,1],6]]]',
'[5,[[[2,0],2],1]]',
'[[[[1,8],3],[[3,9],4]],[0,[[8,2],[7,4]]]]',
'[[[8,6],[[3,9],1]],0]',
'[[[[5,0],2],8],[4,[[3,5],[7,8]]]]',
'[[[7,[3,3]],[[2,5],[4,6]]],[[[0,9],[1,1]],[1,[4,9]]]]',
'[[[7,5],[[7,4],9]],[[[6,3],6],[2,6]]]',
'[[6,2],9]',
'[0,[[6,[2,0]],[[4,5],8]]]',
'[[9,[[6,2],[7,2]]],[[[6,5],6],[8,8]]]',
'[[[[2,0],[8,4]],[5,4]],[[3,2],[7,4]]]',
'[[[[0,1],[8,2]],3],[[6,[4,9]],[[0,2],1]]]',
'[2,[[8,[4,9]],[7,1]]]',
'[[[[6,4],4],[0,5]],[[6,0],3]]',
];

function addLinks(input) {
    if (typeof input == 'number') {
        return {type: 'number', value: input};
    }
    
    return {
        type: 'array',
        '0': addLinks(input[0]),
        '1': addLinks(input[1]),
    }
}

function findLeftNum(input) {
    if (input.type == 'number') return input;
    return findLeftNum(input[0]);
}

function findRightNum(input) {
    if (input.type == 'number') return input;
    return findRightNum(input[1]);
}

function addLinks2(input, left, right, outer, level) {
    if (input.type == 'number') {
        input.left = left;
        input.right = right;
        input.outer = outer;
        input.level = level;
        return input;
    }
    addLinks2(input[0], left, findLeftNum(input[1]), input, level + 1);
    addLinks2(input[1], findRightNum(input[0]), right, input, level + 1);
    input.left = left;
    input.right = right;
    input.outer = outer;
    input.level = level;
    return input;
}

function linkify(input) {
    return addLinks2(input, null, null, null, 0);
}

function parseStr(input) {
    let res = linkify(addLinks(JSON.parse(input)));
    //console.log('parsed', pr(res));
    return res;
}

function tryAll(f, obj) {
    f(obj);
    if (obj.type == 'array')
        tryAll(f, obj[0]);
    if (obj.type == 'array')
        tryAll(f, obj[1]);
}

function explode(obj) {
    let finished = false;
    tryAll(o => {
        if (finished) return;

        if (o.type != 'array') return;
        if (o.level < 4) return;
        if (o[0].type != 'number') return;
        if (o[1].type != 'number') return;

        if (o.left != null) {
            o.left.value += o[0].value;
        }

        if (o.right != null) {
            o.right.value += o[1].value;
        }

        o.type = 'number';
        o.value = 0;
        delete o['0'];
        delete o['1'];
        finished = true;
    }, obj);
    if (finished)
        linkify(obj);
    return finished;
}

function pr2(obj) {
    if (obj.type == 'number') {
        return obj.value;
    } else {
        return [pr2(obj[0]), pr2(obj[1])];
    }
}

function pr(obj) {
    return JSON.stringify(pr2(obj)).replaceAll(' ','');
}

function split(obj) {
    let finished = false;
    tryAll(o => {
        if (finished) return;

        if (o.type != 'number') return;
        if (o.value < 10) return;

        o.type = 'array';
        let val = o.value;
        delete o['value'];
        o[0] = { type: 'number', value: Math.floor(val / 2) };
        o[1] = { type: 'number', value: Math.ceil(val / 2) };
        finished = true;
    }, obj);
    if (finished)
        linkify(obj);
    return finished;
}

function simplify(num) {
    while (true) {
        while (explode(num)) {
        }

        if (!split(num)) {
            break;
        }
    }
}

function tryExplode(input) {
    explode(input);
    return input;
}

asserteq(pr(tryExplode(parseStr('[[[[[9,8],1],2],3],4]'))), '[[[[0,9],2],3],4]');
asserteq(pr(tryExplode(parseStr('[7,[6,[5,[4,[3,2]]]]]'))), '[7,[6,[5,[7,0]]]]');
asserteq(pr(tryExplode(parseStr('[[6,[5,[4,[3,2]]]],1]'))), '[[6,[5,[7,0]]],3]');
asserteq(pr(tryExplode(parseStr('[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]'))), '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]');
asserteq(
    pr(tryExplode(parseStr('[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'))),
    '[[3,[2,[8,0]]],[9,[5,[7,0]]]]');

function add(a, b) {
    let sum = {
        type: 'array',
        '0': a,
        '1': b,
    };
    linkify(sum);
    simplify(sum);
    linkify(sum);
    return sum;
}

asserteq(
    pr(add(parseStr('[[[[4,3],4],4],[7,[[8,4],9]]]'), parseStr('[1,1]'))),
    '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]');


function finalsum(input) {
    let res = parseStr(input[0]);
    for (let i = 1; i < input.length; ++i) {
        res = add(res, parseStr(input[i]));
    }
    return res;
}

asserteq(pr(finalsum([
'[1,1]',
'[2,2]',
'[3,3]',
'[4,4]',
])), '[[[[1,1],[2,2]],[3,3]],[4,4]]');

asserteq(pr(finalsum([
'[1,1]',
'[2,2]',
'[3,3]',
'[4,4]',
'[5,5]',
])), '[[[[3,0],[5,3]],[4,4]],[5,5]]');

asserteq(pr(finalsum([
'[1,1]',
'[2,2]',
'[3,3]',
'[4,4]',
'[5,5]',
'[6,6]',
])), '[[[[5,0],[7,4]],[5,5]],[6,6]]');

asserteq(pr(finalsum([
'[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]',
'[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]',
])), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]');

asserteq(pr(finalsum([
'[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]',
'[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]',
'[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]',
'[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]',
'[7,[5,[[3,8],[1,4]]]]',
'[[2,[2,2]],[8,[8,1]]]',
'[2,9]',
'[1,[[[9,3],9],[[9,0],[0,7]]]]',
'[[[5,[7,4]],7],1]',
'[[[[4,2],2],6],[8,7]]',
])), '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]');

function magnitude(obj) {
    if (obj.type == 'number') return obj.value;
    return 3 * magnitude(obj[0]) + 2 * magnitude(obj[1]);
}

function solveInput(input) {
    return magnitude(finalsum(input));
}

let testinput = [
'[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]',
'[[[5,[2,8]],4],[5,[[9,9],0]]]',
'[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]',
'[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]',
'[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]',
'[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]',
'[[[[5,4],[7,7]],8],[[8,3],8]]',
'[[9,3],[[9,9],[6,[4,9]]]]',
'[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]',
'[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]',
];

asserteq(solveInput(testinput), 4140);

console.log(solveInput(input));

let max = 0;
for (let i = 0; i < input.length; ++i) {
    for (let j = 0; j < input.length; ++j) {
        if (i == j) continue;
        let mag = solveInput([input[i], input[j]]);
        if (mag > max) {
            max = mag;
        }
    }
}
console.log(max);
