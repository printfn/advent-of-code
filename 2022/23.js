let data = `.#....#...##....##.#.###..##..#..#.#.###....#.###.###.##..###......#..##.
...#.##.#..#.#.######...##..#.#...#########.#.######..#.#.#.#...###.#.#.#
###.#.####.#.##.##....##..###.##..##..#.###.#.#.##...#######...###.##...#
.#...#####.##......##.#..###....###..#..#...###..##..##.#.##.###.#.######
.#...#...#.###.....##.##.########.#.##...##..##..#....#.####.###.##......
#####.......###..##..##...#..#.....#..#..##.##...##..........#.#.##.#.###
##..###.#.###.###.#....#...###....#...#.###..##.##.###.#.#.#..###..##.##.
#......#..###....#..###.###.#.#..##..##.###.#.#..#.#.###..###..#..##.##.#
#..####....#.#..#.#.....#...#.##.##.##...#.##.#.#..#.##.#####..##.#.##.#.
.#######..#####.#.#.#...##.#.####.#.#.##....##.##..####..####.#..##..###.
.#.##.###.#######.#...#.##...###........#.###..#.###....#..#....#.##.##..
.#.#.####..##.#.#####.#.....##.###.#..##.##...##.###....####...##.#.#####
#..#..#.##.#....#.#.#.##.##...##..##.####..#..##......##.####..#.##.#.##.
#.#.#.##....##..####.###....####...####..#..##..#.#..........#.##..###..#
.#....###.#.#.#.####...######.#.##.......##..#..##.#...#...##.....####.#.
#.....#.#.###.##..##....##.##.##.#.##..##.##...###...#..#....#.#.##.#....
.##.#.#####.#......#..##.###..#..#..###.#........####.#.####.#.##.#####.#
..##.#.#..........#..#.##..#.#.#.....##.#.#.#######..#.##.###.#..#.#####.
.##..#.####.....#.#..#..###.##..###.##.##.#####..#.#.###...#.##.#.####.##
###.#.######...###...#..#..##.#####..#.#..#...##.#.#.#.##......#.##..#.##
#..#...#...#.##########.###..#.#.##..#.#..#####..######.###....##.##....#
##...#######..#######.#......###..##.#.##.####..###.###.#####..######.#.#
.###.####.#.#.##..####...##.##..#....#.#.#.#...#....#.##..#..#.....##.#.#
##..........#....##...#######.#.#####.##....##..#.#.##.#.#..#...##.##..##
##.......##..#.##...#..#..###.#.##......##...#.#...###..#....#..##.#.#...
#####.###....######.#.######.####..##..#..#.#....#######....##.###..##..#
##..#..#..##.#...##.#####.#.##..##...#..##.....#.#.#....##.##.#..#....###
..###.##.....#....###.#..#####.#.###.#.#..###.########....#.#.##........#
##.#...#...###..###.####..###.#######..######...##.#...#.#.#.###..##.#...
...#.#...####...###.##.##.##..#.#..##.#.#.####...#.#.....#...#..##....#..
####...#.#.#.......####.#..#..####.#..###.#......#..###...#.#.##...#....#
##......##...#.##..#.#...#####...#.#####....#....###.#..#...#....##.#..#.
...#####...#.....##.#.##.##..#.#..###.#.##.#####...##..#.#.##.##...###.#.
..#...##..####...##.###..#...#......##...##.#.#.###.#.#...#..#...#...####
.##.###.#.#.#.###.##...#.#.#...#.#...##..#.#....####.##...###..##..#...#.
.##.#####.#..##.##....##.##.#..##.#..##.#..#.##.###.....#..##.###.##...##
#.#...####..#.#....##...##..#...##...##.##.##.#..#.#.......####.#.###..#.
##.#.##...#.#.#..#.#..##.#.#.##..#....#..###.##.##.##.....#..#..###.##.#.
...#...#.#......########.###.#.#.###.####.#.#.####...#.#.#.....#...###...
....###.#.#..##..#.#.#.##.###.###.....###.##.##.##.#.##..#...#.####..##.#
#....###.........#.##..#..#.##.##....#.##..#.#.##......#.##.#..##..##....
#....####.#....####.##.#.#...#.####.#.#.##..#.##.####...#..##.##.##.#.##.
...##..#..#...##.#.#.#.####...#.#...#.#.#.###..#.###..#..##.#.#..#####...
..#####..######.##.##..#.####.#.#..#...#....#.#..#########..##.#.####.##.
#..#.#...#.####...#......#.#...#.#.###..#..#.#....#..#..##..#..##.#......
#.####...#######..###.#.#..##...##.#...#####...##....#.##.#.#.###..##.###
####..###...##..######..#####..#...#####...#.#.####.##.....##....#.#...##
.#####.#..##.###.......###.######.#######.#.##..###.###...#.#...#..#####.
.##.###...##..##..#.###.#.##.###...###...##.#...#..##.##...####.###...##.
#..#..#..##..#.#.#.##....##..#...##.##....##.###.##.#....#...#....#####..
.#..#..######...#.#.##.###.###.#.#...#.#....#..#..##.##..#..####...#.###.
##.##.#####..###.##.#.#.###......###.#.##....###..#..####.###......##....
#.#.###..#..###.#....#.#....##.#...#.##.####.#.##......#.#..##.#....#..##
####..##.#..#...###....#.##...#..#.#...#.####....##..#..##...#..#.....#..
..#..###.#..#.##....#######..##......#.##...##.##.##.##..#.#..##.##......
.##.#.#.###....####.#.#.###..#.###....#..#..###..##..###.#..#.##.#..####.
..###..##.##...#..#...#...#.#.##..####.#..#..#.#..######.##.#.##....#.#..
..###.......##.#.##.####.##...##.#######.#..#..###..#.#.##.#...##.###.##.
##.#..#.##.#.###.####..#.##.......###.########.#.#....#.#...###.#.#.#..##
#.#..#..##...####...#...#.###.##...##.....#...#..#.####.#.#.##.#####.....
.######.#..#..#...#..#..#..##.##.##...#....##.#.#.##.###..##....#########
##....#...#.###...########.#####.#######.#...#.##.#..#..#.###.#.######.##
.###.#....##.#.#.#.#.##..#####.####.###.#..#.##..##..##..##.....#.#.#####
#.#.###.#..##...###.#.....###.##..##.....##.###.####..###.#...#..##.###.#
#####.#####.#...##.######.#..#.####.##.#.#..#.....####.#...#.#.....##..##
.#.#.#.###.#.#.##.##...#####...#.....##.##.#######..#####.#.##..##...##..
#.#...##.#.###...##.#.#.##.#....####....#.#.#..#..##.####.##..#.#.....##.
.##.#.##..#####..#..#.#.###..##.#....######..##...###.#...##..##.#....###
.##...#..#.#######.#.#...##.##.##.#...##....#.###.#....#.#..##.###..#.###
####.#....#.#..#.#...#..#..#..##....##..####.#.####.#..#..#..#.#..#.#.##.
.####..#.##..#.#.###...########.##.##...#.##....##..##.#.####...#..#.##..
###.#.#...#.#...##.#.###......##...###.#..#.##.########.###......###.####
##..#####..#.#.##.#######.######....#.###..#.#...#...#.###.#.##..#...##..`.split('\n').map(e => e.split(''));

// data = `.....
// ..##.
// ..#..
// .....
// ..##.
// .....`.split('\n').map(e => e.split(''));

// data = `....#..
// ..###.#
// #...#.#
// .#...##
// #.###..
// ##.#.##
// .#..#..`.split('\n').map(e => e.split(''));

function mk2d(a, b) {
    let arr = [];
    for (let i = 0; i < a; ++i) {
        let row = [];
        for (let j = 0; j < b; ++j) {
            row.push('.');
        }
        arr.push(row);
    }
    return arr;
}

function draw2d(img) {
    for (let i = 0; i < img.length; ++i) {
        let row = '';
        for (let j = 0; j < img[i].length; ++j) {
            row += img[i][j];
        }
        console.log(row);
    }
}

function tryget(arr, x, y, def) {
    if (arr[x] !== undefined && arr[x][y] !== undefined) {
        return arr[x][y];
    }
    return def;
}

function mapadd(map, key, val) {
    if (map[key] === undefined) {
        map[key] = [val];
    } else {
        map[key].push(val);
    }
}

let dirs = ['n', 's', 'w', 'e'];

function step(data) {
    let proposed = {};
    let expand = false;
    outer: for (let i = 0; i < data.length; ++i) {
        for (let j = 0; j < data[0].length; ++j) {
            if (data[i][j] == '#' && (i == 0 || j == 0 || i == data.length - 1 || j == data[0].length - 1)) {
                expand = true;
                break outer;
            }
        }
    }
    // console.log('expand', expand);
    let next = expand ? mk2d(data.length + 2, data[0].length + 2) : mk2d(data.length, data[0].length);

    for (let i = 0; i < data.length; ++i) {
        for (let j = 0; j < data[0].length; ++j) {
            if (data[i][j] != '#') continue;
            const n = tryget(data, i-1, j, '.');
            const ne = tryget(data, i-1, j+1, '.');
            const nw = tryget(data, i-1, j-1, '.');
            const e = tryget(data, i, j+1, '.');
            const w = tryget(data, i, j-1, '.');
            const s = tryget(data, i+1, j, '.');
            const se = tryget(data, i+1, j+1, '.');
            const sw = tryget(data, i+1, j-1, '.');
            const checkdirs = {
                n: n == '.' && ne == '.' && nw == '.',
                s: s == '.' && se == '.' && sw == '.',
                w: w == '.' && nw == '.' && sw == '.',
                e: e == '.' && ne == '.' && se == '.',
            };
            const nextpos = {
                n: `${i-1},${j}`,
                s: `${i+1},${j}`,
                w: `${i},${j-1}`,
                e: `${i},${j+1}`,
            };
            // console.log(nw + n + ne + '\n' + w + '@' + e + '\n' + sw + s + se);
            if (n == '.' && ne == '.' && nw == '.' && e == '.' && w == '.' && s == '.' && se == '.' && sw == '.') {
                // don't do anything
                if (expand)
                    next[i+1][j+1] = '#';
                else
                    next[i][j] = '#';
            } else if (checkdirs[dirs[0]]) {
                // console.log(`elf at ${i},${j} proposes moving ${dirs[0]}`);
                mapadd(proposed, nextpos[dirs[0]], [i,j]);
            } else if (checkdirs[dirs[1]]) {
                // console.log(`elf at ${i},${j} proposes moving ${dirs[1]}`);
                mapadd(proposed, nextpos[dirs[1]], [i,j]);
            } else if (checkdirs[dirs[2]]) {
                // console.log(`elf at ${i},${j} proposes moving ${dirs[2]}`);
                mapadd(proposed, nextpos[dirs[2]], [i,j]);
            } else if (checkdirs[dirs[3]]) {
                // console.log(`elf at ${i},${j} proposes moving ${dirs[3]}`);
                mapadd(proposed, nextpos[dirs[3]], [i,j]);
            } else {
                // throw new Error('idk where to move to');
                if (expand)
                    next[i+1][j+1] = '#';
                else
                    next[i][j] = '#';
            }
        }
    }

    let proposedcount = 0;

    for (let key in proposed) {
        ++proposedcount;
        let vals = proposed[key];
        if (vals.length == 1) {
            // move
            let [i,j] = key.split(',').map(e => parseInt(e));
            if (expand)
                next[i+1][j+1] = '#';
            else
                next[i][j] = '#';
        } else {
            // no one moves
            for (let [i,j] of vals) {
                if (expand)
                    next[i+1][j+1] = '#';
                else
                    next[i][j] = '#';
            }
        }
    }
    // console.log('proposedcount', proposedcount);
    if (proposedcount == 0) {
        return;
    }
    // draw2d(next);
    return next;
}

function score(data) {
    let mini = Infinity;
    let maxi = 0;
    let minj = Infinity;
    let maxj = 0;
    for (let i = 0; i < data.length; ++i) {
        for (let j = 0; j < data[0].length; ++j) {
            if (data[i][j] == '#') {
                if (i < mini) mini = i;
                if (i > maxi) maxi = i;
                if (j < minj) minj = j;
                if (j > maxj) maxj = j;
            }
        }
    }
    let count = 0;
    for (let i = mini; i <= maxi; ++i) {
        for (let j = minj; j <= maxj; ++j) {
            if (data[i][j] == '.') ++count;
        }
    }
    return count;
}

let roundcount = 0;

let current = JSON.parse(JSON.stringify(data));
for (; roundcount < 10; ++roundcount) {
    current = step(current);
    let first = dirs.splice(0, 1);
    dirs.push(first);
}
console.log(score(current));

while (true) {
    let next = step(current);
    if (next === undefined) {
        console.log(roundcount + 1);
        break;
    }
    let first = dirs.splice(0, 1);
    dirs.push(first);
    ++roundcount;
    // console.log(roundcount);
    let same = true;
    outer: for (let i = 0; i < current.length; ++i) {
        for (let j = 0; j < current[0].length; ++j) {
            if (current[i] != next[i+1]) {
                same = false;
                break outer;
            }
        }
    }
    if (same) {
        console.log(roundcount);
        break;
    }
    current = next;
}
